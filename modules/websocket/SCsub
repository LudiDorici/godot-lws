#!/usr/bin/env python

Import('env')
Import('env_modules')

# Thirdparty source files

env_lws = env_modules.Clone()

thirdparty_dir = "#thirdparty/lws/"
helper_dir = "win32helpers/"
openssl_dir = "#thirdparty/openssl/"
thirdparty_sources = [
    "alloc.c",
    "misc/base64-decode.c",
    "client/client.c",
    "client/client-handshake.c",
    "client/client-parser.c",
    "context.c",
#    "daemonize.c",
    "ext/extension.c",
    "ext/extension-permessage-deflate.c",
    "server/fops-zip.c",
#    "getifaddrs.c",
    "handshake.c",
    "header.c",
#    "hpack.c",
#    "http2.c",
    "misc/lejp.c",
    "server/lejp-conf.c",
#    "libev.c",
#    "libevent.c",
#    "libuv.c",
    "libwebsockets.c",
#    "lws-plat-esp32.c",
#    "lws-plat-esp8266.c",
#    "lws-plat-optee.c",
##    "minihuf.c",
    "minilex.c",
    "output.c",
    "server/parsers.c",
    "pollfd.c",
    "server/ranges.c",
#    "rewrite.c",
#    "romfs.c",
    "server/server.c",
    "server/server-handshake.c",
    "service.c",
    "misc/sha-1.c",
#    "smtp.c",
    "ssl.c",
    "client/ssl-client.c",
#    "ssl-http2.c",
    "server/ssl-server.c",

]

if env_lws["platform"] == "windows":
    thirdparty_sources += ["plat/lws-plat-win.c", helper_dir + "getopt.c", helper_dir + "getopt_long.c", helper_dir + "gettimeofday.c"]
else:
    thirdparty_sources += ["plat/lws-plat-unix.c"]


thirdparty_sources = [thirdparty_dir + file for file in thirdparty_sources]

if env_lws["platform"] == "javascript":
    pass
else:
    env_lws.add_source_files(env.modules_sources, thirdparty_sources)
    env_lws.Append(CPPPATH=[thirdparty_dir])

    if env['builtin_openssl']:
        env_lws.Append(CPPPATH=[openssl_dir])

    if env_lws["platform"] == "windows":
        env_lws.Append(CPPPATH=[thirdparty_dir + helper_dir])

#env_lws.Append(CPPFLAGS=["-DGODOT_ENET", "-DLWS_WITH_STATIC", "-DLWS_WITH_SSL", ""])

env_lws.add_source_files(env.modules_sources, "*.cpp")
